////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.6
//  \   \         Application : sch2hdl
//  /   /         Filename : Top_SCPU_IOBUS_App.vf
// /___/   /\     Timestamp : 11/03/2015 21:39:16
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath D:/Users/ZPC_MIPS/AAI_CPU/ipcore_dir -intstyle ise -family spartan3e -verilog D:/Users/ZPC_MIPS/AAI_CPU/Top_SCPU_IOBUS_App.vf -w D:/Users/ZPC_MIPS/AAI_CPU/Top_SCPU_IOBUS_App.sch
//Design Name: Top_SCPU_IOBUS_App
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module alu_MUSER_Top_SCPU_IOBUS_App(A, 
                                    ALU_operation, 
                                    B, 
                                    overflow, 
                                    res, 
                                    zero);

    input [31:0] A;
    input [2:0] ALU_operation;
    input [31:0] B;
   output overflow;
   output [31:0] res;
   output zero;
   
   wire N0;
   wire [32:0] S;
   wire [31:0] XLXN;
   wire [31:0] XLXN_11;
   wire [31:0] XLXN_19;
   wire [31:0] XLXN_21;
   wire [31:0] XLXN_22;
   wire [31:0] XLXN_28;
   wire [31:0] XLXN_30;
   wire [31:0] res_DUMMY;
   
   assign res[31:0] = res_DUMMY[31:0];
   ADC32  XLXI_4 (.A(A[31:0]), 
                 .B(XLXN_11[31:0]), 
                 .C0(ALU_operation[2]), 
                 .S(S[32:0]));
   xor32  XLXI_5 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_28[31:0]));
   nor32  XLXI_6 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN[31:0]));
   srl32  XLXI_7 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_30[31:0]));
   or_bit_32  XLXI_8 (.A(res_DUMMY[31:0]), 
                     .o(zero));
   xor32  XLXI_9 (.A(XLXN_19[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_11[31:0]));
   SignalExt_32  XLXI_10 (.S(ALU_operation[2]), 
                         .So(XLXN_19[31:0]));
   or32  XLXI_18 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_22[31:0]));
   and32  XLXI_19 (.A(A[31:0]), 
                  .B(B[31:0]), 
                  .res(XLXN_21[31:0]));
   mux8to1_32  XLXI_20 (.sel(ALU_operation[2:0]), 
                       .x0(XLXN_21[31:0]), 
                       .x1(XLXN_22[31:0]), 
                       .x2(S[31:0]), 
                       .x3(XLXN_28[31:0]), 
                       .x4(XLXN[31:0]), 
                       .x5(XLXN_30[31:0]), 
                       .x6(S[31:0]), 
                       .x7({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, S[32]}), 
                       .o(res_DUMMY[31:0]));
   GND  XLXI_21 (.G(N0));
endmodule
`timescale 1ns / 1ps

module Data_path_MUSER_Top_SCPU_IOBUS_App(ALUSrcA, 
                                          ALUSrcB, 
                                          ALU_operation, 
                                          Branch, 
                                          Cause, 
                                          clk, 
                                          CP0Dst, 
                                          CP0Write, 
                                          DatatoCP0, 
                                          data2CPU, 
                                          IorD, 
                                          IRWrite, 
                                          MemtoReg, 
                                          MIO_ready, 
                                          PCSource, 
                                          PCWrite, 
                                          PCWriteCond, 
                                          RegDst, 
                                          RegWrite, 
                                          reset, 
                                          Unsigned, 
                                          data_out, 
                                          Inst, 
                                          M_addr, 
                                          overflow, 
                                          PC_Current, 
                                          zero);

    input ALUSrcA;
    input [1:0] ALUSrcB;
    input [2:0] ALU_operation;
    input Branch;
    input [2:0] Cause;
    input clk;
    input [1:0] CP0Dst;
    input CP0Write;
    input [2:0] DatatoCP0;
    input [31:0] data2CPU;
    input IorD;
    input IRWrite;
    input [2:0] MemtoReg;
    input MIO_ready;
    input [2:0] PCSource;
    input PCWrite;
    input PCWriteCond;
    input [1:0] RegDst;
    input RegWrite;
    input reset;
    input Unsigned;
   output [31:0] data_out;
   output [31:0] Inst;
   output [31:0] M_addr;
   output overflow;
   output [31:0] PC_Current;
   output zero;
   
   wire [31:0] ALU_Out;
   wire [31:0] CP0_out;
   wire [31:0] Imm_32;
   wire N0;
   wire [31:0] PC_next;
   wire V5;
   wire [4:0] Wt_addr;
   wire [31:0] Wt_data;
   wire [4:0] W_R_addr;
   wire [31:0] XLXN_3;
   wire [31:0] XLXN_41;
   wire [31:0] XLXN_42;
   wire [31:0] XLXN_48;
   wire [31:0] XLXN_49;
   wire XLXN_56;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_65;
   wire XLXN_70;
   wire [31:0] XLXN_75;
   wire [31:0] XLXN_103;
   wire [31:0] XLXN_104;
   wire [31:0] XLXN_224;
   wire [31:0] PC_Current_DUMMY;
   wire zero_DUMMY;
   wire [31:0] Inst_DUMMY;
   wire [31:0] data_out_DUMMY;
   
   assign data_out[31:0] = data_out_DUMMY[31:0];
   assign Inst[31:0] = Inst_DUMMY[31:0];
   assign PC_Current[31:0] = PC_Current_DUMMY[31:0];
   assign zero = zero_DUMMY;
   REG32  ALUOut (.CE(V5), 
                 .clk(clk), 
                 .D(XLXN_42[31:0]), 
                 .rst(N0), 
                 .Q(ALU_Out[31:0]));
   Ext_32  EXT (.imm_16(Inst_DUMMY[15:0]), 
               .Imm_32(XLXN_104[31:0]));
   REG32  IR (.CE(IRWrite), 
             .clk(clk), 
             .D(data2CPU[31:0]), 
             .rst(N0), 
             .Q(Inst_DUMMY[31:0]));
   REG32  MDR (.CE(V5), 
              .clk(clk), 
              .D(data2CPU[31:0]), 
              .rst(N0), 
              .Q(XLXN_3[31:0]));
   mux4to1_5  mux2 (.a(Inst_DUMMY[20:16]), 
                   .b(Inst_DUMMY[15:11]), 
                   .c({V5, V5, V5, V5, V5}), 
                   .d({N0, N0, N0, N0, N0}), 
                   .sel(RegDst[1:0]), 
                   .o(Wt_addr[4:0]));
   mux4to1_32  mux3 (.a(data_out_DUMMY[31:0]), 
                    .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                    .c(Imm_32[31:0]), 
                    .d({Imm_32[29:0], N0, N0}), 
                    .sel(ALUSrcB[1:0]), 
                    .o(XLXN_41[31:0]));
   mux2to1_32  mux4 (.a(PC_Current_DUMMY[31:0]), 
                    .b(XLXN_48[31:0]), 
                    .sel(ALUSrcA), 
                    .o(XLXN_49[31:0]));
   mux2to1_32  mux6 (.a(PC_Current_DUMMY[31:0]), 
                    .b(ALU_Out[31:0]), 
                    .sel(IorD), 
                    .o(M_addr[31:0]));
   REG32  PC (.CE(XLXN_70), 
             .clk(clk), 
             .D(XLXN_75[31:0]), 
             .rst(reset), 
             .Q(PC_Current_DUMMY[31:0]));
   alu_MUSER_Top_SCPU_IOBUS_App  U1 (.A(XLXN_49[31:0]), 
                                    .ALU_operation(ALU_operation[2:0]), 
                                    .B(XLXN_41[31:0]), 
                                    .overflow(overflow), 
                                    .res(XLXN_42[31:0]), 
                                    .zero(zero_DUMMY));
   Regs  U2 (.clk(clk), 
            .L_S(RegWrite), 
            .rst(reset), 
            .R_addr_A(Inst_DUMMY[25:21]), 
            .R_addr_B(Inst_DUMMY[20:16]), 
            .Wt_addr(Wt_addr[4:0]), 
            .Wt_data(Wt_data[31:0]), 
            .rdata_A(XLXN_48[31:0]), 
            .rdata_B(data_out_DUMMY[31:0]));
   XOR2  XLXI_21 (.I0(zero_DUMMY), 
                 .I1(Branch), 
                 .O(XLXN_56));
   INV  XLXI_22 (.I(XLXN_56), 
                .O(XLXN_61));
   AND2  XLXI_23 (.I0(XLXN_61), 
                 .I1(PCWriteCond), 
                 .O(XLXN_62));
   OR2  XLXI_24 (.I0(XLXN_62), 
                .I1(PCWrite), 
                .O(XLXN_65));
   AND2  XLXI_25 (.I0(XLXN_65), 
                 .I1(MIO_ready), 
                 .O(XLXN_70));
   GND  XLXI_26 (.G(N0));
   VCC  XLXI_27 (.P(V5));
   Ext_32_Unsigned  XLXI_29 (.imm_16(Inst_DUMMY[15:0]), 
                            .imm_32(XLXN_103[31:0]));
   mux2to1_32  XLXI_30 (.a(XLXN_104[31:0]), 
                       .b(XLXN_103[31:0]), 
                       .sel(Unsigned), 
                       .o(Imm_32[31:0]));
   mux8to1_32  XLXI_33 (.sel(MemtoReg[2:0]), 
                       .x0(ALU_Out[31:0]), 
                       .x1(XLXN_3[31:0]), 
                       .x2({Inst_DUMMY[15:0], N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0}), 
                       .x3(PC_Current_DUMMY[31:0]), 
                       .x4(CP0_out[31:0]), 
                       .x5(), 
                       .x6(), 
                       .x7(), 
                       .o(Wt_data[31:0]));
   mux8to1_32  XLXI_35 (.sel(PCSource[2:0]), 
                       .x0(XLXN_42[31:0]), 
                       .x1(ALU_Out[31:0]), 
                       .x2({PC_Current_DUMMY[31:28], Inst_DUMMY[25:0], N0, 
         N0}), 
                       .x3(ALU_Out[31:0]), 
                       .x4(CP0_out[31:0]), 
                       .x5({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0, N0}), 
                       .x6(), 
                       .x7(), 
                       .o(XLXN_75[31:0]));
   mux4to1_5  XLXI_42 (.a(Inst_DUMMY[15:11]), 
                      .b({N0, V5, V5, N0, N0}), 
                      .c({N0, V5, V5, N0, V5}), 
                      .d({N0, V5, V5, V5, N0}), 
                      .sel(CP0Dst[1:0]), 
                      .o(W_R_addr[4:0]));
   CoPorcessor0  XLXI_48 (.clk(clk), 
                         .rst(N0), 
                         .R_addr(W_R_addr[4:0]), 
                         .we(CP0Write), 
                         .Wt_addr(W_R_addr[4:0]), 
                         .Wt_data(XLXN_224[31:0]), 
                         .rdata_(CP0_out[31:0]));
   PCNext  XLXI_55 (.inPCCurrent(PC_Current_DUMMY[31:0]), 
                   .outPCNext(PC_next[31:0]));
   mux8to1_32  XLXI_56 (.sel(DatatoCP0[2:0]), 
                       .x0(data_out_DUMMY[31:0]), 
                       .x1({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         Cause[2:0]}), 
                       .x2({CP0_out[27:0], N0, N0, N0, N0}), 
                       .x3({N0, N0, N0, N0, CP0_out[31:4]}), 
                       .x4(PC_Current_DUMMY[31:0]), 
                       .x5(PC_next[31:0]), 
                       .x6(), 
                       .x7(), 
                       .o(XLXN_224[31:0]));
endmodule
`timescale 1ns / 1ps

module Muliti_CPU_MUSER_Top_SCPU_IOBUS_App(clk, 
                                           Data_in, 
                                           INT_CNT, 
                                           INT_KBD, 
                                           MIO_ready, 
                                           reset, 
                                           Addr_out, 
                                           CPU_MIO, 
                                           Data_out, 
                                           inst_out, 
                                           mem_w, 
                                           PC_out, 
                                           state);

    input clk;
    input [31:0] Data_in;
    input INT_CNT;
    input INT_KBD;
    input MIO_ready;
    input reset;
   output [31:0] Addr_out;
   output CPU_MIO;
   output [31:0] Data_out;
   output [31:0] inst_out;
   output mem_w;
   output [31:0] PC_out;
   output [4:0] state;
   
   wire ALUSrcA;
   wire [1:0] ALUSrcB;
   wire Branch;
   wire [2:0] Cause;
   wire CP0Write;
   wire IorD;
   wire IRWrite;
   wire MemRead;
   wire [2:0] MemtoReg;
   wire MemWrite;
   wire neg_MemRead;
   wire overflow;
   wire PCWrite;
   wire PCWriteCond;
   wire [1:0] RegDst;
   wire RegWrite;
   wire Unsigned;
   wire XLXN_33;
   wire [2:0] XLXN_43;
   wire [1:0] XLXN_44;
   wire [2:0] XLXN_46;
   wire [2:0] XLXN_49;
   wire [31:0] inst_out_DUMMY;
   
   assign inst_out[31:0] = inst_out_DUMMY[31:0];
   ctrl  U1_1 (.clk(clk), 
              .Inst_in(inst_out_DUMMY[31:0]), 
              .INT_CNT(INT_CNT), 
              .INT_KBD(INT_KBD), 
              .MIO_ready(MIO_ready), 
              .overflow(overflow), 
              .reset(reset), 
              .zero(XLXN_33), 
              .ALUSrcA(ALUSrcA), 
              .ALUSrcB(ALUSrcB[1:0]), 
              .ALU_operation(XLXN_49[2:0]), 
              .Branch(Branch), 
              .Cause(Cause[2:0]), 
              .CPU_MIO(CPU_MIO), 
              .CP0Dst(XLXN_44[1:0]), 
              .CP0Write(CP0Write), 
              .DatatoCP0(XLXN_46[2:0]), 
              .IorD(IorD), 
              .IRWrite(IRWrite), 
              .MemRead(MemRead), 
              .MemtoReg(MemtoReg[2:0]), 
              .MemWrite(MemWrite), 
              .PCSource(XLXN_43[2:0]), 
              .PCWrite(PCWrite), 
              .PCWriteCond(PCWriteCond), 
              .RegDst(RegDst[1:0]), 
              .RegWrite(RegWrite), 
              .state_out(state[4:0]), 
              .Unsigned(Unsigned));
   Data_path  U1_2 (.ALUSrcA(ALUSrcA), 
                   .ALUSrcB(ALUSrcB[1:0]), 
                   .ALU_operation(XLXN_49[2:0]), 
                   .Branch(Branch), 
                   .Cause(Cause[2:0]), 
                   .clk(clk), 
                   .CP0Dst(XLXN_44[1:0]), 
                   .CP0Write(CP0Write), 
                   .DatatoCP0(XLXN_46[2:0]), 
                   .data2CPU(Data_in[31:0]), 
                   .IorD(IorD), 
                   .IRWrite(IRWrite), 
                   .MemtoReg(MemtoReg[2:0]), 
                   .MIO_ready(MIO_ready), 
                   .PCSource(XLXN_43[2:0]), 
                   .PCWrite(PCWrite), 
                   .PCWriteCond(PCWriteCond), 
                   .RegDst(RegDst[1:0]), 
                   .RegWrite(RegWrite), 
                   .reset(reset), 
                   .Unsigned(Unsigned), 
                   .data_out(Data_out[31:0]), 
                   .Inst(inst_out_DUMMY[31:0]), 
                   .M_addr(Addr_out[31:0]), 
                   .overflow(overflow), 
                   .PC_Current(PC_out[31:0]), 
                   .zero(XLXN_33));
   INV  XLXI_4 (.I(MemRead), 
               .O(neg_MemRead));
   AND2  XLXI_5 (.I0(MemWrite), 
                .I1(neg_MemRead), 
                .O(mem_w));
endmodule
`timescale 1ns / 1ps

module Top_SCPU_IOBUS_App(BTN, 
                          clk_50mhz, 
                          PS2_clk, 
                          PS2_Data, 
                          SW, 
                          LED, 
                          vga_hs, 
                          vga_rgb, 
                          vga_vs);

    input [3:0] BTN;
    input clk_50mhz;
    input PS2_clk;
    input PS2_Data;
    input [7:0] SW;
   output [7:0] LED;
   output vga_hs;
   output [2:0] vga_rgb;
   output vga_vs;
   
   wire [31:0] Addr_out;
   wire [3:0] button_out;
   wire clka;
   wire [31:0] clkdiv;
   wire Clk_CPU;
   wire [31:0] counter_out;
   wire [1:0] counter_set;
   wire counter_we;
   wire counter0_out;
   wire counter1_out;
   wire counter2_out;
   wire [31:0] Cpu_data2bus;
   wire [31:0] Data_in;
   wire GPIOffff1000_we;
   wire [7:0] keyboard_in;
   wire mem_w;
   wire [31:0] PC_out;
   wire [31:0] Peripheral_in;
   wire [9:0] ram_addr;
   wire [31:0] ram_data_in;
   wire [31:0] ram_data_out;
   wire rst;
   wire [7:0] SW_OK;
   wire [8:0] vram_addr;
   wire [8:0] vram_addr_ctr;
   wire [31:0] vram_data_out;
   wire [31:0] vram_to_ctr;
   wire V5;
   wire XLXN_55;
   wire [0:0] XLXN_191;
   wire [7:0] LED_DUMMY;
   
   assign LED[7:0] = LED_DUMMY[7:0];
   Muliti_CPU_MUSER_Top_SCPU_IOBUS_App  U1 (.clk(Clk_CPU), 
                                           .Data_in(Data_in[31:0]), 
                                           .INT_CNT(counter0_out), 
                                           .INT_KBD(), 
                                           .MIO_ready(V5), 
                                           .reset(rst), 
                                           .state(), 
                                           .Addr_out(Addr_out[31:0]), 
                                           .CPU_MIO(), 
                                           .Data_out(Cpu_data2bus[31:0]), 
                                           .inst_out(), 
                                           .mem_w(mem_w), 
                                           .PC_out(PC_out[31:0]));
   RAM_B  U3 (.addra(ram_addr[9:0]), 
             .clka(clka), 
             .dina(ram_data_in[31:0]), 
             .wea(XLXN_191[0]), 
             .douta(ram_data_out[31:0]));
   MIO_BUS  U4 (.addr_bus(Addr_out[31:0]), 
               .BTN(button_out[3:0]), 
               .clk(clk_50mhz), 
               .counter_out(counter_out[31:0]), 
               .counter0_out(counter0_out), 
               .counter1_out(counter1_out), 
               .counter2_out(counter2_out), 
               .Cpu_data2bus(Cpu_data2bus[31:0]), 
               .keyboard_in(keyboard_in[7:0]), 
               .led_out(LED_DUMMY[7:0]), 
               .mem_w(mem_w), 
               .ram_data_out(ram_data_out[31:0]), 
               .rst(rst), 
               .SW(SW_OK[7:0]), 
               .vram_data_out(vram_data_out[31:0]), 
               .counter_we(counter_we), 
               .Cpu_data4bus(Data_in[31:0]), 
               .data_ram_we(XLXN_191[0]), 
               .GPIOffff0200_we(), 
               .GPIOffff1000_we(GPIOffff1000_we), 
               .Peripheral_in(Peripheral_in[31:0]), 
               .ram_addr(ram_addr[9:0]), 
               .ram_data_in(ram_data_in[31:0]), 
               .vram_addr(vram_addr[8:0]));
   clk_div  U8 (.clk(clk_50mhz), 
               .rst(rst), 
               .SW2(SW_OK[2]), 
               .clkdiv(clkdiv[31:0]), 
               .Clk_CPU(Clk_CPU));
   Anti_jitter  U9 (.button(BTN[3:0]), 
                   .clk(clk_50mhz), 
                   .SW(SW[7:0]), 
                   .button_out(button_out[3:0]), 
                   .button_pulse(), 
                   .rst(rst), 
                   .SW_OK(SW_OK[7:0]));
   Counter_x  U10 (.clk(XLXN_55), 
                  .clk0(clkdiv[7]), 
                  .clk1(clkdiv[10]), 
                  .clk2(clkdiv[10]), 
                  .counter_ch(counter_set[1:0]), 
                  .counter_val(Peripheral_in[31:0]), 
                  .counter_we(counter_we), 
                  .rst(rst), 
                  .counter_out(counter_out[31:0]), 
                  .counter0_OUT(counter0_out), 
                  .counter1_OUT(counter1_out), 
                  .counter2_OUT(counter2_out));
   VCC  XLXI_3 (.P(V5));
   INV  XLXI_9 (.I(Clk_CPU), 
               .O(XLXN_55));
   INV  XLXI_14 (.I(clk_50mhz), 
                .O(clka));
   led_Dev_IO  XLXI_15 (.clk(XLXN_55), 
                       .GPIOffff0200_we(V5), 
                       .Peripheral_in(PC_out[31:0]), 
                       .rst(rst), 
                       .counter_set(counter_set[1:0]), 
                       .GPIOf0(), 
                       .led_out(LED_DUMMY[7:0]));
   VGA_controller  XLXI_17 (.clk(clk_50mhz), 
                           .reset(rst), 
                           .VRAM_in(vram_to_ctr[31:0]), 
                           .hsync(vga_hs), 
                           .pixel_addr(vram_addr_ctr[8:0]), 
                           .rgb(vga_rgb[2:0]), 
                           .vsync(vga_vs));
   keyboard_buffer  XLXI_20 (.clk_50mhz(clk_50mhz), 
                            .ps2c(PS2_clk), 
                            .ps2d(PS2_Data), 
                            .reset(rst), 
                            .key_out(keyboard_in[7:0]));
   VRAM  XLXI_24 (.a(vram_addr[8:0]), 
                 .clk(clk_50mhz), 
                 .d(Peripheral_in[31:0]), 
                 .dpra(vram_addr_ctr[8:0]), 
                 .we(GPIOffff1000_we), 
                 .dpo(vram_to_ctr[31:0]), 
                 .spo(vram_data_out[31:0]));
endmodule
